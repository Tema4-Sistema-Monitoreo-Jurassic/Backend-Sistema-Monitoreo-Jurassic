@startuml
' === PAQUETE DOMAIN ===
package domain {
    ' Clase base para todos los dinosaurios
    abstract class Dinosaurio {
        - String id
        - String nombre
        - int edad
        - String habitat
        - Sensor[] sensores
        - Posicion posicion
        + void comer()
        + void mover(Posicion nuevaPosicion)
        + void monitorearSensores()
        + void enviarAlertaSiSensorFueraDeRango()
        + boolean estaEnfermo()
    }

    class Posicion {
        - int x
        - int y
        - String zona
        + Posicion(int x, int y, String zona)
        + String obtenerCoordenadas()
    }

    ' Tipos de alimentación y sus reglas
    abstract class Carnivoro extends Dinosaurio {
        + void cazar()
        + boolean puedeComer(Dinosaurio otroDino)
    }

    abstract class Herbivoro extends Dinosaurio {
        + void pastar()
        + void comerPlantas()
    }

    abstract class Omnivoro extends Dinosaurio {
        + void buscarComida()
        + void comerPlantas()
        + void cazar()
    }

    ' Subtipos de Carnivoro con restricciones de alimentación
    class CarnivoroVolador extends Carnivoro {
        + boolean puedeComer(Dinosaurio otroDino) : true para Volador, Terrestre, Acuatico
    }

    class CarnivoroTerrestre extends Carnivoro {
        + boolean puedeComer(Dinosaurio otroDino) : true para Terrestre, Acuatico
    }

    class CarnivoroAcuatico extends Carnivoro {
        + boolean puedeComer(Dinosaurio otroDino) : true solo para Acuatico
    }

    ' Subtipos de Herbivoro
    class HerbivoroVolador extends Herbivoro {
        + void pastar()
        + void comerPlantas()
    }

    class HerbivoroTerrestre extends Herbivoro {
        + void pastar()
        + void comerPlantas()
    }

    class HerbivoroAcuatico extends Herbivoro {
        + void pastar()
        + void comerPlantas()
    }

    ' Subtipos de Omnivoro
    class OmnivoroVolador extends Omnivoro {
        + void buscarComida()
        + void comerPlantas()
        + void cazar()
    }

    class OmnivoroTerrestre extends Omnivoro {
        + void buscarComida()
        + void comerPlantas()
        + void cazar()
    }

    class OmnivoroAcuatico extends Omnivoro {
        + void buscarComida()
        + void comerPlantas()
        + void cazar()
    }

    ' Relaciones de subclases de Dinosaurio
    Dinosaurio <|-- Carnivoro
    Dinosaurio <|-- Herbivoro
    Dinosaurio <|-- Omnivoro

    Carnivoro <|-- CarnivoroVolador
    Carnivoro <|-- CarnivoroTerrestre
    Carnivoro <|-- CarnivoroAcuatico

    Herbivoro <|-- HerbivoroVolador
    Herbivoro <|-- HerbivoroTerrestre
    Herbivoro <|-- HerbivoroAcuatico

    Omnivoro <|-- OmnivoroVolador
    Omnivoro <|-- OmnivoroTerrestre
    Omnivoro <|-- OmnivoroAcuatico

    Dinosaurio "1" *-- "1" Posicion

    ' Sensores y su relación con los dinosaurios
    class Sensor {
        - String id
        - String tipo
        - double limiteInferior
        - double limiteSuperior
        + Mono<Datos> obtenerDatos()
        + boolean estaFueraDeRango()
        + Evento generarEventoFueraDeRango()
    }

    class SensorMovimiento extends Sensor {
        + void registrarMovimiento()
    }

    class SensorTemperatura extends Sensor {
        + void registrarTemperatura()
    }

    class SensorFrecuenciaCardiaca extends Sensor {
        + void registrarFrecuenciaCardiaca()
    }

    Sensor <|-- SensorMovimiento
    Sensor <|-- SensorTemperatura
    Sensor <|-- SensorFrecuenciaCardiaca

    ' Relación de dinosaurios con sensores
    Dinosaurio "1" *-- "*" Sensor

    ' Clase para datos de sensores
    class Datos {
        - LocalDateTime timestamp
        - Double valor
        + void procesarDatos()
    }

    Sensor "1" *-- "1" Datos : datos actuales

    ' Clase Evento para registrar eventos de sensores fuera de rango
    class Evento {
        - Integer id
        - String sensorTipo
        - String datos
        - OffsetDateTime dateCreated
        - OffsetDateTime lastUpdated
        + void registrarEvento()
    }

    Sensor "1" *-- "*" Evento : eventos generados

    ' Clases adicionales de usuarios, credenciales y roles
    class Usuario {
        - String id
        - String nombre
        - String email
        - Credenciales credenciales
        - Rol rol
        + void accederSistema()
        + void visualizarDatos()
    }

    class Credenciales {
        - String usuario
        - String contraseña
        + boolean validar()
    }

    class Rol {
        - String nombreRol
        - List<String> permisos
        + boolean tienePermiso(String permiso)
    }

    ' Relaciones de usuario, credenciales y roles
    Usuario *-- Credenciales
    Usuario *-- Rol

    ' Roles específicos
    class Administrador extends Rol {
        + void gestionarUsuarios()
        + void registrarDinosaurio(Dinosaurio dino)
        + void eliminarDinosaurio(String dinoId)
    }

    class Paleontologo extends Rol {
        + void visualizarDinosaurios()
    }

    class User extends Rol {
        + void accederDashboard()
    }

    Rol <|-- Administrador
    Rol <|-- Paleontologo
    Rol <|-- User

    ' Clase base Isla
    abstract class Isla {
        - String nombre
        - int capacidadMaxima
        - List<Dinosaurio> dinosaurios
        - int[][] tablero
        + Isla(int n)
        + void inicializarTablero()
        + void agregarDinosaurio(Dinosaurio dino, Posicion posicion)
        + void eliminarDinosaurio(Dinosaurio dino)
        + boolean tieneCapacidad()
        + boolean esPosicionValida(Posicion posicion)
    }

    ' Subtipos de Isla
    class IslaTerrestreAerea extends Isla {
        + void permitirDinosauriosTerrestres()
        + void permitirDinosauriosVoladores()
    }

    class IslaAcuatica extends Isla {
        + void permitirDinosauriosAcuaticos()
    }

    class Enfermeria extends Isla {
        + void monitorearDinosauriosEnfermos()
        + void liberarDinosaurio(Dinosaurio dino)
    }

    ' Criadero y sus subtipos especializados
    abstract class Criadero extends Isla {
        + void criarDinosauriosMenores()
    }

    class CriaderoTerrestre extends Criadero {
        + void permitirDinosauriosTerrestres()
    }

    class CriaderoVoladores extends Criadero {
        + void permitirDinosauriosVoladores()
    }

    class CriaderoAcuatico extends Criadero {
        + void permitirDinosauriosAcuaticos()
    }

    ' Relaciones de subclases de Isla y Criadero
    Isla <|-- IslaTerrestreAerea
    Isla <|-- IslaAcuatica
    Isla <|-- Enfermeria
    Isla <|-- Criadero

    Criadero <|-- CriaderoTerrestre
    Criadero <|-- CriaderoVoladores
    Criadero <|-- CriaderoAcuatico

    ' Relación de Dinosaurio con Isla
    Isla "1" *-- "*" Dinosaurio
}

' === PAQUETE MESSAGING ===
package messaging {
    class RabbitMQProducer {
        + void enviarMensaje(String cola, String mensaje)

        + void aplicarBackpressureOnBuffer(String mensaje)
        ' Envía mensajes y aplica onBackpressureBuffer, almacenando mensajes en un buffer hasta que puedan procesarse.
    }
}


' === PAQUETE SERVICE ===
package service {

        class AuthService {
            - UsuarioRepository usuarioRepository
            - CredencialesRepository credencialesRepository
            - RolRepository rolRepository
            - BCryptPasswordEncoder passwordEncoder

            + AuthService()
            + Mono<ResponseEntity<AuthResponseDTO>> login(LoginRequestDTO loginRequest)
            + Mono<ResponseEntity<AuthResponseDTO>> register(RegisterRequestDTO registerRequest)
        }


    class DinosaurioService {
            - RabbitMQProducer rabbitMQProducer
            - DinosaurioRepository dinosaurioRepository
            - IslaRepository islaRepository
            - ExecutorService executorService
            - ExecutorService executorServiceTipo
            - ExecutorService executorServiceDelete
            - ExecutorService executorServiceCreate
            - ExecutorService executorServiceUpdate
            - ExecutorService executorServiceGetById
            - IslaService islaService
            - SensorService sensorService
            - Set<String> dinosauriosEnTraslado
            - ReentrantLock lock
            - Map<String, AtomicBoolean> simulacionCancelTokens
            - Semaphore accesoEnfermeria
            - Map<String, AtomicBoolean> cancelTokensCrecimiento

            + DinosaurioService(DinosaurioRepository, IslaRepository, RabbitMQProducer, IslaService, SensorService)
            + void iniciarSimulacionCancelTokens(String islaId, AtomicBoolean cancelToken)
            + void cancelarSimulacion(String islaId)
            + Flux<Dinosaurio> getAll()
            + Flux<CarnivoroTerrestre> obtenerCarnivorosTerrestres()
            + Flux<CarnivoroVolador> obtenerCarnivorosVoladores()
            + Flux<CarnivoroAcuatico> obtenerCarnivorosAcuaticos()
            + Flux<HerbivoroTerrestre> obtenerHerbivorosTerrestres()
            + Flux<HerbivoroVolador> obtenerHerbivorosVoladores()
            + Flux<HerbivoroAcuatico> obtenerHerbivorosAcuaticos()
            + Flux<OmnivoroTerrestre> obtenerOmnivorosTerrestres()
            + Flux<OmnivoroVolador> obtenerOmnivorosVoladores()
            + Flux<OmnivoroAcuatico> obtenerOmnivorosAcuaticos()
            + Mono<DinosaurioDTO> getById(String id)
            + Mono<DinosaurioDTO> create(DinosaurioDTO dto)
            + void iniciarSimulacionCrecimiento(Dinosaurio dino)
            - Mono<Void> eliminarDinosaurioDeIslaYBdd(Dinosaurio dino)
            - Mono<Criadero> obtenerCriaderoParaDinosaurio(Dinosaurio dino)
            + Mono<DinosaurioDTO> update(String id, DinosaurioDTO dto)
            + Mono<Void> enviarAlerta(String mensaje)
            + Mono<Void> delete(String id)
            + Mono<DinosaurioDTO> mapToDTO(Dinosaurio dinosaurio)
            + Mono<Dinosaurio> mapToEntity(DinosaurioDTO dto)
            + Mono<Void> alimentarDinosaurio(Dinosaurio dino, Isla isla)
            - Mono<Void> eliminarDinosaurioPorTipo(Isla isla, String dinosaurioId)
            + IslaDTO convertirIslaAIslaDTO(Isla isla)
            + Mono<Void> iniciarMonitoreoEnfermeriaDinosaurios(Dinosaurio dino, Enfermeria enfermeria)
            + Mono<Void> detectarYMoverSiEnfermo(String dinosaurioId, IslaDTO origenDTO, Enfermeria enfermeria)
            + Mono<Void> iniciarSimulacionRecuperacion(Dinosaurio dino, IslaDTO origenDTO)
            - void printTablero(int[][] tablero)
            + Mono<Void> moverDinoMaduroACriadero(Dinosaurio dino, Criadero criadero)
            - Posicion encontrarNuevaPosicionDisponible(Isla isla)
            - <T extends Isla> Mono<Isla> obtenerDestinoIslaOReintentar(Class<T> islaClase, IslaDTO nuevaIslaDTO)
        }

    class IslaService {
            - IslaRepository islaRepository
            - DinosaurioRepository dinosaurioRepository
            - ExecutorService executorService
            - ExecutorService executorServiceDelete
            - ExecutorService executorServiceCreate
            - ExecutorService executorServiceUpdate
            - ExecutorService executorServiceGetById
            - DinosaurioService dinosaurioService
            - SensorService sensorService
            - Set<String> islasConSimulacionActiva

            + IslaService(IslaRepository, DinosaurioService, DinosaurioRepository, SensorService)
            + Flux<Isla> getAll()
            + Mono<IslaDTO> getById(String id)
            + Mono<IslaDTO> create(IslaDTO dto)
            + Mono<IslaDTO> update(String id, IslaDTO dtoActualizado)
            + Mono<Void> delete(String id)
            + Mono<Isla> mapToEntity(IslaDTO dto)
            + Mono<IslaDTO> mapToDTO(Isla isla)
            + Mono<Void> agregarDinosaurioIsla(Isla isla, DinosaurioDTO dinoDTO, Posicion posicion)
            + Mono<Void> eliminarDinosaurioIsla(IslaDTO islaDTO, String dinosaurioId)
            + Mono<Void> iniciarSimulacionMovimiento(IslaDTO islaDTO)
            - boolean esPosicionValida(Isla isla, Posicion posicion)
            + Mono<Void> moverDinosaurioIsla(String dinosaurioId, IslaDTO origenDTO, IslaDTO destinoDTO)
        }

    class SensorService {
            - SensorRepository sensorRepository
            - SensorFactory sensorFactory
            - ExecutorService executorService
            - ExecutorService executorServiceTipo
            - ExecutorService executorServiceDelete
            - ExecutorService executorServiceCreate
            - ExecutorService executorServiceUpdate
            - ExecutorService executorServiceGetById
            - ConcurrentHashMap<String, AtomicLong> lastAlertTime
            - EventoService eventoService

            + SensorService(SensorRepository, SensorFactory, EventoService)
            + Flux<Sensor> getAll()
            + Flux<SensorTemperatura> obtenerSensoresDeTemperatura()
            + Flux<SensorMovimiento> obtenerSensoresDeMovimiento()
            + Flux<SensorFrecuenciaCardiaca> obtenerSensoresDeFrecuenciaCardiaca()
            + Mono<Sensor> getById(String id)
            + Mono<Sensor> create(String id, String tipo, double valor, double limiteInferior, double limiteSuperior)
            + Mono<SensorDTO> update(String id, SensorDTO sensorActualizadoDTO)
            + Mono<Void> delete(String id)
            + Mono<SensorDTO> mapToDTO(Sensor sensor)
            + Mono<Sensor> mapToEntity(SensorDTO dto)
            + Mono<Map<String, Double>> generarValoresAleatoriosParaSensoresTempCard(Dinosaurio dino)
            - Mono<Void> actualizarValorSensor(Sensor sensor, double nuevoValor)
            + Mono<Void> detectarYRegistrarMovimiento(Dinosaurio dino, Posicion posicionAnterior, Posicion nuevaPosicion)
            - Mono<Void> generarEventoSiFueraDeRango(SensorMovimiento sensorMovimiento, double valorMovimiento)
        }

       class EventoService {
           - EventoRepository eventoRepository
           - RabbitMQProducer rabbitMQProducer
           - ExecutorService executorService
           - ExecutorService executorServiceDelete
           - ExecutorService executorServiceCreate
           - ExecutorService executorServiceUpdate
           - ExecutorService executorServiceGetById

           + EventoService(EventoRepository, RabbitMQProducer)
           + Flux<Evento> getAll()
           + Mono<Evento> getById(String id)
           + Mono<EventoDTO> create(EventoDTO dto)
           + Mono<Evento> update(String id, Evento eventoActualizado)
           + Mono<Void> delete(String id)
           + Mono<Void> enviarAlerta(Evento evento)
           + Mono<Evento> mapToEntity(EventoDTO dto)
           + Mono<EventoDTO> mapToDTO(Evento evento)
       }


        class UsuarioService {
            - UsuarioRepository usuarioRepository
            - ExecutorService executorService
            - ExecutorService executorServiceDelete
            - ExecutorService executorServiceCreate
            - ExecutorService executorServiceUpdate
            - ExecutorService executorServiceGetById

            + UsuarioService(UsuarioRepository)
            + Flux<Usuario> getAll()
            + Mono<Usuario> getById(String id)
            + Mono<UsuarioDTO> create(UsuarioDTO usuarioDTO)
            + Mono<UsuarioDTO> update(String id, UsuarioDTO usuarioActualizadoDTO)
            + Mono<Void> delete(String id)
            + Mono<UsuarioDTO> mapToDTO(Usuario usuario)
            + Mono<Usuario> mapToEntity(UsuarioDTO dto)
        }

AuthService --> UsuarioRepository : usa
AuthService --> CredencialesRepository : usa
AuthService --> RolRepository : usa
AuthService --> BCryptPasswordEncoder : usa

DinosaurioService --> RabbitMQProducer : usa
DinosaurioService --> SensorService : usa
DinosaurioService --> IslaService : usa
DinosaurioService --> DinosaurioRepository : usa
DinosaurioService --> IslaRepository : usa

IslaService --> IslaRepository : usa
IslaService --> DinosaurioRepository : usa
IslaService --> DinosaurioService : usa
IslaService --> SensorService : usa

SensorService --> SensorRepository : usa
SensorService --> SensorFactory : usa
SensorService --> EventoService : usa

EventoService --> RabbitMQProducer : usa
EventoService --> EventoRepository : usa

UsuarioService --> UsuarioRepository : usa

' === PAQUETE AOP ===
package aop {

    class ErrorHandlingAspect {
    }

    class SecurityAspect {
    }

    class ValidationAspect {
    }

    class NotificationAspect {
    }

    class PerformanceMonitoringAspect {
    }

    ' Asociaciones de AOP con los métodos del Service
    ErrorHandlingAspect --> service.DinosaurioService : todas las funciones
    SecurityAspect --> service.UsuarioService : aplica en registrarUsuario, actualizarRol
    ValidationAspect --> service.IslaService : valida crearIsla, eliminarIsla
    ValidationAspect --> service.DinosaurioService : valida crearDinosaurio, eliminarDinosaurio
    ValidationAspect --> service.UsuarioService : valida crearUsuario, eliminarUsuario
    NotificationAspect --> service.EventoService : notificaciones en registrarEvento
    PerformanceMonitoringAspect --> service.DinosaurioService : monitorea
    PerformanceMonitoringAspect --> service.EventoService : monitorea
    PerformanceMonitoringAspect --> service.IslaService : monitorea
    PerformanceMonitoringAspect --> service.UsuarioService : monitorea
}

' === PAQUETE CONTROLLER ===
package controller {
    ' Controlador para Dinosaurios
    class DinosaurioController {
        + Flux<DinosaurioDTO> obtenerDinosaurios()
        ' Obtiene la lista completa de dinosaurios para visualización y monitoreo en tiempo real.

        + Mono<DinosaurioDTO> obtenerDinosaurio(String id)
        ' Devuelve los detalles de un dinosaurio específico, identificable por su ID.

        + Mono<Void> eliminarDinosaurio(String id)
        ' Elimina un dinosaurio específico del sistema, aplicando validación y auditoría en los servicios.

        + Mono<DinosaurioDTO> crearDinosaurio(DinosaurioDTO dinosaurioDTO)
        ' Crea un nuevo dinosaurio y lo añade al sistema.

        + Mono<Void> actualizarDinosaurio(String id, DinosaurioDTO dinosaurioDTO)
        ' Permite la actualización de los datos de un dinosaurio específico, como posición o estado de salud.

        + Flux<EventoDTO> obtenerEventosDinosaurio(String id)
        ' Obtiene eventos específicos asociados a un dinosaurio, como alertas de sensores.
    }

    ' Controlador para Islas
    class IslaController {
        + Flux<IslaDTO> obtenerIslas()
        ' Obtiene la lista completa de islas disponibles en el sistema.

        + Mono<IslaDTO> obtenerIsla(String id)
        ' Devuelve los detalles de una isla específica.

        + Mono<Void> eliminarIsla(String id)
        ' Elimina una isla del sistema, asegurando que esté vacía de dinosaurios.

        + Mono<IslaDTO> crearIsla(IslaDTO islaDTO)
        ' Crea una nueva isla y la añade al sistema.

        + Mono<Void> actualizarIsla(String id, IslaDTO islaDTO)
        ' Actualiza los detalles de una isla, como su capacidad máxima o tipo.
    }

    ' Controlador para Sensores
    class SensorController {
        + Flux<SensorDTO> obtenerSensores()
        ' Obtiene la lista de todos los sensores para monitoreo en tiempo real.

        + Mono<SensorDTO> obtenerSensor(String id)
        ' Devuelve los detalles de un sensor específico.

        + Mono<Void> eliminarSensor(String id)
        ' Elimina un sensor específico del sistema.

        + Mono<SensorDTO> crearSensor(SensorDTO sensorDTO)
        ' Crea y añade un nuevo sensor al sistema, asignándolo a un dinosaurio.

        + Mono<Void> actualizarSensor(String id, SensorDTO sensorDTO)
        ' Permite la actualización de los límites y configuración de un sensor específico.

        + Flux<EventoDTO> obtenerEventosSensor(String id)
        ' Obtiene eventos específicos generados por un sensor, útil para diagnósticos de alertas.
    }

    ' Controlador para Usuarios y Roles
    class UsuarioController {
        + Mono<UsuarioDTO> registroUsuario(UsuarioDTO usuario)
        ' Registra un nuevo usuario en el sistema y aplica roles y permisos.

        + Mono<Void> eliminarUsuario(String id)
        ' Elimina un usuario del sistema, con validación de permisos.

        + Mono<Void> asignarRol(String usuarioId, RolDTO rol)
        ' Asigna o actualiza el rol de un usuario en el sistema.

        + Flux<UsuarioDTO> obtenerUsuarios()
        ' Devuelve la lista completa de usuarios registrados, útil para administradores.

        + Mono<UsuarioDTO> obtenerUsuario(String id)
        ' Obtiene los detalles de un usuario específico.
    }

    ' Controlador para Eventos y Notificaciones
    class EventoController {
        + Flux<EventoDTO> obtenerEventos()
        ' Obtiene la lista de todos los eventos registrados, como alertas de sensores.

        + Mono<EventoDTO> registrarEvento(EventoDTO eventoDTO)
        ' Permite registrar un evento manualmente, útil en caso de errores automáticos.

        + void enviarAlerta(Evento evento)
        ' Envía una alerta crítica mediante RabbitMQ cuando un evento excede límites de seguridad.

        + Flux<EventoDTO> obtenerEventosCriticos()
        ' Devuelve eventos considerados críticos, aplicando un filtro de severidad.
    }
}

' === PAQUETE FACTORY ===
package factory {
    class DinosaurioFactory {
        + Dinosaurio crearDinosaurio(String tipo, String habitat)
    }

    class IslaFactory {
        + Isla crearIsla(String tipo, String nombre, int capacidadMaxima)
    }

    class SensorFactory {
        + Sensor crearSensor(String tipo)
    }
}

' === PAQUETE REPOSITORY ===
package repository {
    interface DinosaurioRepository {
        + Flux<Dinosaurio> findAll()
        + Mono<Dinosaurio> findById(String id)
        + Mono<Dinosaurio> save(Dinosaurio dinosaurio)
        + Mono<Void> deleteById(String id)
    }

    interface IslaRepository {
        + Flux<Isla> findAll()
        + Mono<Isla> findById(String id)
        + Mono<Isla> save(Isla isla)
        + Mono<Void> deleteById(String id)
    }

    interface SensorRepository {
        + Flux<Sensor> findAll()
        + Mono<Sensor> findById(String id)
        + Mono<Sensor> save(Sensor sensor)
        + Mono<Void> deleteById(String id)
    }

    interface EventoRepository {
        + Flux<Evento> findAll()
        + Mono<Evento> save(Evento evento)
    }

    interface UsuarioRepository {
        + Mono<Usuario> findById(String id)
        + Mono<Usuario> save(Usuario usuario)
        + Mono<Void> deleteById(String id)
    }
}

' === PAQUETE CONFIG ===
package config {
    class WebFluxConfig {
        + void configure()
    }

    class SecurityConfig {
        + void configureSecurity()
    }

    class ActuatorConfig {
        + void configureActuator()
    }
}

' === PAQUETE DTO ===
package dto {
    class DinosaurioDTO {
        - String id
        - String nombre
        - String tipo
        - SensorDTO[] sensores
    }

    class SensorDTO {
        - String id
        - String tipo
        - Double limiteInferior
        - Double limiteSuperior
    }

    class UsuarioDTO {
        - String id
        - String nombre
        - String rol
    }

    class EventoDTO {
        - Integer id
        - String sensorTipo
        - String datos
        - OffsetDateTime dateCreated
    }

    class IslaDTO {
        - String id
        - String nombre
        - String tipo
        - int capacidadMaxima
    }

    class RolDTO {
        - String nombre
        - List<String> permisos
    }
}

@enduml
